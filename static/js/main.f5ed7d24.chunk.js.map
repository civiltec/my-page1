{"version":3,"sources":["logo.svg","components/PhoneForm.js","components/PhoneInfo.js","components/PhoneInfoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PhoneForm","state","name","phone","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onCreate","onSubmit","this","placeholder","onChange","type","Component","PhoneInfo","editing","handleToggleEdit","handleRemove","info","onRemove","id","prevProps","prevState","console","log","onUpdate","nextProps","nextState","style","border","padding","margin","onClick","defaultProps","PhoneInfoList","data","list","map","key","defiaultProps","warn","App","information","keyword","handleCreate","concat","filter","handleUpdate","filteredList","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5ed7d24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// file: src/components/PhoneForm.js\r\nimport React, { Component } from 'react';\r\n\r\nclass PhoneForm extends Component {\r\n  state = {\r\n    name: '',\r\n    phone: ''\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) =>\r\n  {\r\n      e.preventDefault();\r\n      this.props.onCreate(this.state);\r\n      this.setState(\r\n          {\r\n              name: '',\r\n              phone: ''\r\n          }\r\n      );\r\n  }\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          placeholder=\"이름\"\r\n          value={this.state.name}\r\n          onChange={this.handleChange}\r\n          name=\"name\"\r\n        />\r\n        <input\r\n          placeholder=\"전화번호\"\r\n          value={this.state.phone}\r\n          onChange={this.handleChange}\r\n          name=\"phone\"\r\n        />\r\n\r\n        <button type=\"submit\">등록</button>\r\n    \r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneForm;","import React, { Component } from 'react';\r\n\r\nclass PhoneInfo extends Component \r\n{\r\n    static defaultProps =\r\n    {\r\n        info: {\r\n            name : '이름',\r\n            phone: '010-0000-0000',\r\n            id: 0\r\n        }\r\n    }\r\n    state = {\r\n        // 우리는 수정 버튼을 눌렀을 떄 editing 값을 true 로 설정해줄것입니다.\r\n        // 이 값이 true 일 때에는, 기존에 텍스트 형태로 보여주던 값들을\r\n        // input 형태로 보여주게 됩니다.\r\n        editing: false,\r\n        // input 의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도\r\n        // 설정합니다\r\n        name: '',\r\n        phone: '',\r\n    }\r\n      \r\n    // editing 값을 반전시키는 함수입니다\r\n    // true -> false, false -> true\r\n    handleToggleEdit = () => {\r\n        const { editing } = this.state;\r\n        this.setState({ editing: !editing });\r\n    }\r\n\r\n    // input 에서 onChange 이벤트가 발생 될 때\r\n    // 호출되는 함수입니다\r\n    handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n        [name]: value\r\n        });\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // 여기서는, editing 값이 바뀔 때 처리 할 로직이 적혀있습니다.\r\n        // 수정을 눌렀을땐, 기존의 값이 input에 나타나고,\r\n        // 수정을 적용할땐, input 의 값들을 부모한테 전달해줍니다.\r\n\r\n        console.log('componentDidUpdate');\r\n\r\n        const { info, onUpdate } = this.props;\r\n        if(!prevState.editing && this.state.editing) {\r\n        // editing 값이 false -> true 로 전환 될 때\r\n        // info 의 값을 state 에 넣어준다\r\n        console.log('true componentDidUpdate');\r\n        this.setState({\r\n            name: info.name,\r\n            phone: info.phone\r\n        })\r\n        }\r\n\r\n        if (prevState.editing && !this.state.editing) {\r\n        // editing 값이 true -> false 로 전환 될 때\r\n        console.log('false componentDidUpdate');\r\n        onUpdate(info.id, {\r\n            name: this.state.name,\r\n            phone: this.state.phone\r\n        });\r\n        }\r\n    }\r\n\r\n    handleRemove = () =>\r\n    {\r\n        const { info, onRemove } = this.props;\r\n        onRemove(info.id);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) \r\n    {\r\n      if (!this.state.editing && !nextState.editing && nextProps.info === this.props.info)\r\n      {\r\n        return false;\r\n      }\r\n      else\r\n        return true;\r\n    }\r\n\r\n    render()\r\n    {\r\n        const style = {\r\n            border: '1px solid black',\r\n            padding: '8px',\r\n            margin: '8px'\r\n        };\r\n\r\n        const { editing } = this.state;\r\n\r\n        console.log('render PhoneInfo' + this.props.info.id);\r\n\r\n        if (editing) { // 수정모드\r\n          console.log('editiong');\r\n\r\n          return (\r\n            <div style={style}>\r\n              <div>\r\n                <input\r\n                  value={this.state.name}\r\n                  name=\"name\"\r\n                  placeholder=\"이름\"\r\n                  onChange={this.handleChange}\r\n                />\r\n              </div>\r\n              <div>\r\n                <input\r\n                  value={this.state.phone}\r\n                  name=\"phone\"\r\n                  placeholder=\"전화번호\"\r\n                  onChange={this.handleChange}\r\n                />\r\n              </div>\r\n              <button onClick={this.handleToggleEdit}>적용</button>\r\n              <button onClick={this.handleRemove}>삭제</button>\r\n            </div>\r\n          );\r\n        }\r\n       //\r\n        const {name, phone} = this.props.info;\r\n\r\n        return (\r\n            <div style={style}>\r\n                <div><b>{name}</b></div>\r\n                <div>{phone}</div>\r\n                <button onClick={this.handleToggleEdit}>수정</button>\r\n                <button onClick={this.handleRemove}>삭제</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneInfo;\r\n","import React, { Component } from 'react';\r\nimport PhoneInfo from './PhoneInfo';\r\n\r\nclass PhoneInfoList extends Component \r\n{\r\n    static defiaultProps = { \r\n        list: [],\r\n        onRemove: () => console.warn('onRemove not defined'),\r\n        onUpdate: () => console.warn('onUpdate not defined'),\r\n     };\r\n\r\n    shouldComponentUpdate(nextProps, nextState) \r\n    {\r\n        return nextProps.data !== this.props.data;\r\n    }\r\n\r\n    render()\r\n    {\r\n        /* const {data} = this.props;\r\n           const list = data.map(info => (<PhoneInfo key={info.id} info={info}/>));\r\n        */\r\n        console.log('render PhoneInfoList');\r\n\r\n        const {data, onRemove, onUpdate } = this.props;\r\n        const list = data.map (\r\n            info => (\r\n            <PhoneInfo \r\n                key={info.id} \r\n                info={info} \r\n                onRemove={onRemove} \r\n                onUpdate={onUpdate}\r\n            />)\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {list}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneInfoList;","import React, { Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PhoneForm from './components/PhoneForm';\nimport PhoneInfoList from './components/PhoneInfoList';\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <div><PhoneForm /></div>\n    </div>\n  );\n}\n*/\n\n\nclass App extends Component\n{\n  id = 2;\n  state = \n  {\n    information: [\n      {\n        id: 0,\n        name: '김민종',\n        phone: '010-0000-0000'\n      },\n      {\n        id: 1,\n        name: '홍길동',\n        phone: '010-0001-0000'\n      }\n    ],\n    keyword: ''\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      keyword: e.target.value,\n    });\n  }\n  \n  handleCreate = (data) =>\n  {\n    const { information } = this.state;\n    this.setState(\n      { information: information.concat({id:this.id++, ...data})}\n    )\n  }\n  handleRemove = (id) => {\n    const { information } = this.state;\n    this.setState({\n      information: information.filter(info => info.id !== id)\n    })\n  }\n  handleUpdate = (id, data) => {\n    const { information } = this.state;\n    this.setState({\n      information: information.map(\n        info => id === info.id\n          ? { ...info, ...data } // 새 객체를 만들어서 기존의 값과 전달받은 data 을 덮어씀\n          : info // 기존의 값을 그대로 유지\n      )\n    })\n  }\n\n\n  render()\n  {\n    const { information, keyword } = this.state;\n    const filteredList = information.filter(\n      info => info.name.indexOf(keyword) !== -1\n    );\n    return (\n      <div>\n        <PhoneForm \n         onCreate={this.handleCreate}\n        />\n        <p>\n          <input \n            placeholder=\"검색 할 이름을 입력하세요..\" \n            onChange={this.handleChange}\n            value={keyword}\n          />\n        </p>\n        <hr />\n        <PhoneInfoList // data={this.state.information}\n          data = {filteredList}\n          onRemove={this.handleRemove} \n          onUpdate={this.handleUpdate} \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}